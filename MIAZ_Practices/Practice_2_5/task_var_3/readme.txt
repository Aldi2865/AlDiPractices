```markdown
# Operations Planning - Проект для практики з PostgreSQL

Цей репозиторій містить код для практики з базами даних PostgreSQL, використовуючи дані про планування військових операцій.

## Структура проекту

```
operations_planning/
├── config.py                  # Конфігурація проекту (БД, шляхи)
├── create_database.py        # Створення БД та таблиць у PostgreSQL
├── populate_database.py       # Заповнення БД даними з файлу Excel
├── sql_queries.py           # SQL запити
├── results/                  # Папка для збереження результатів запитів (створюється автоматично)
│   ├── query_1.txt
│   ├── query_2.txt
│   ├── ...
│   └── query_20.txt
├── operations_data.xlsx      # Файл Excel з даними (створюється автоматично)
├── create_excel_data.py      # Створення файлу Excel з тестовими даними
├── run_all.py                # Запуск всіх скриптів
├── find_venv.py              # Модуль з функцією для пошуку віртуального середовища
└── README.md                 # Цей файл
```

## Опис файлів

*   **`config.py`:**
    *   Містить клас `Config` для управління конфігурацією проекту.
    *   Зберігає параметри підключення до бази даних (ім'я БД, користувач, пароль, хост, порт).
    *   Визначає шлях до файлу Excel з даними (`operations_data.xlsx`).
    *   Містить логіку для автоматичного пошуку віртуального середовища `.venv` та визначення шляху до інтерпретатора Python.
    *   Визначає поточну директорію запуску скриптів.

*   **`create_database.py`:**
    *   Створює базу даних PostgreSQL (якщо вона ще не існує) згідно з конфігурацією в `config.py`.
    *   Створює дві таблиці: `Operations` та `Operations_Staff`.

*   **`populate_database.py`:**
    *   Зчитує дані з файлу `operations_data.xlsx` (лист "Operations" та "Operations_Staff").
    *   Заповнює таблиці `Operations` та `Operations_Staff` в базі даних.

*   **`sql_queries.py`:**
    *   Містить 20 SQL запитів для вибірки даних з таблиць `Operations` та `Operations_Staff`.
    *   Виконує запити, використовуючи конфігурацію з `config.py`.
    *   Зберігає результати кожного запиту в окремий файл у папці `results` у поточній директорії.
    *   Файли з результатами мають назву `query_N.txt`, де `N` - номер запиту.
    *   Кожен файл містить текст запиту та його результат.

*   **`results/`:**
    *   Папка для зберігання результатів SQL запитів.
    *   Створюється автоматично скриптом `sql_queries.py`.

*   **`operations_data.xlsx`:**
    *   Файл Excel з тестовими даними.
    *   Містить два листи: `Operations` та `Operations_Staff`.
    *   Створюється автоматично скриптом `create_excel_data.py`.

*   **`create_excel_data.py`:**
    *   Генерує тестові дані для операцій та персоналу.
    *   Створює файл `operations_data.xlsx` з двома листами: `Operations` та `Operations_Staff`.
    *   Використовує бібліотеку `faker` для генерації реалістичних даних.

*   **`run_all.py`:**
    *   Головний скрипт для запуску всього процесу.
    *   Використовує конфігурацію з `config.py`.
    *   Визначає шлях до інтерпретатора Python (з `.venv` або системний).
    *   Послідовно запускає інші скрипти:
        1.  `create_excel_data.py`
        2.  `create_database.py`
        3.  `populate_database.py`
        4.  `sql_queries.py`

*   **`find_venv.py`:**
    *   Містить функцію `find_venv`, яка шукає `.venv` у поточній та батьківських директоріях.

## Вимоги

*   Python 3.x
*   PostgreSQL
*   Бібліотеки Python:
    *   `psycopg2-binary`
    *   `pandas`
    *   `faker`
    *   `xlsxwriter`
    *   `configparser`

## Встановлення бібліотек

```bash
pip install psycopg2-binary pandas faker xlsxwriter configparser
```

## Налаштування

1.  Створіть віртуальне середовище `.venv` (опціонально, але рекомендовано).
2.  Встановіть необхідні бібліотеки (див. Вимоги).
3.  Відкрийте файл `config.py` та змініть параметри підключення до бази даних (при необхідності):
    *   `db_name`
    *   `user`
    *   `password`
    *   `host`
    *   `port`

## Використання

1.  Запустіть файл `run_all.py`:

    ```bash
    python run_all.py
    ```

    Цей скрипт виконає всі необхідні кроки: створить файл Excel з даними, створить базу даних та таблиці, заповнить таблиці даними та виконає SQL запити.
2.  Результати SQL запитів будуть збережені в папці `results`.

**Додатково:**

*   Ви можете запускати кожен скрипт окремо, якщо вам потрібно виконати тільки певну частину роботи.
*   Якщо `.venv` не знайдено, буде використано системний інтерпретатор Python.
*   Папка `results` створюється автоматично в поточній директорії запуску скриптів.
```
